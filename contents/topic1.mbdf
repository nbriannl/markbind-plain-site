<frontmatter>
  header: header.md
  pageNav: 2
  pageNavTitle: "Chapters of This Page"
  siteNav: site-nav.md
</frontmatter>

<br>

# #1168 Bug: Trim in codeAndOutput.md does not work here

<include src="codeAndOutput.md" boilerplate >
<variable name="code">
<br>
The fault lies in the break
</variable>
</include>

<include src="codeAndOutput.md" boilerplate >
<variable name="code">
<hr>
hr also will cause it
</variable>
</include>

-----


# #1168 Bug: Using codeAndOutput.md boilerplate will cause wrong rendering of boolean attributes
- light
- dismissible
- minimized
- expanded
- no-switch, no-close

But works for some boolean attributes e.g. seamless

<!-- #1168 Bug: Using codeAndOutput.md boilerplate will cause wrong rendering of boolean attributes, e.g. light, dismissible etc. -->
<include src="codeAndOutput.md" boilerplate >
<variable name="code">
<box dismissible>
    dismissible info
</box>
<box light>
    warning light
</box>
<box seamless>
    info seamless
</box>
<panel header="Panel header" expanded>
  ...
</panel>
<panel header="Panel header" minimized>
  ...
</panel>
<panel header="This panel does not have either buttons" no-close no-switch>
  ...
</panel>
<question has-input>
  Which country did the Hawaiian pizza originate from?
</question>
</variable>
</include>

-------

# #1168 Bug: Have to put spaces on empty lines or else the spans will collapse. Markdown-it rendering issue or variable related issue?

<!-- #1168 Bug: Have to put spaces on empty lines or else the spans will collapse. Markdown it rendering issue or variable related issue? -->
<include src="codeAndOutput.md" boilerplate >
<variable name="code">
```java {highlight-lines="2,4,6-8"}
import java.util.List;
 
public class Inventory {
    private List<Item> items;
 
    public int getItemCount(){
        return items.size();
    }
 
    //...
}
```
</variable>
</include>

--------

# #1168 Bug: Using codeAndOutput.md boilerplate causes extra divs to render

<!-- #1168 Bug: Using codeAndOutput.md boilerplate causes extra divs to render -->
<include src="codeAndOutput.md" boilerplate >
<variable name="code">
<!--Notice how header attribute supports inline MarkDown-->
<dropdown header="*Action*" type="primary">
  <li><a href="" class="dropdown-item">...</a></li>
</dropdown>

<!-- For segmented dropdown, ignore header and add a "before" slot -->
<dropdown type="info">
  <button slot="before" type="button" class="btn btn-info">Segmented</button>
  <li><a href="" class="dropdown-item">...</a></li>
</dropdown>

<!-- Right aligned list -->
<dropdown header="Right aligned list" type="primary" menu-align-right>
  <li><a href="#dropdown" class="dropdown-item">Something else here</a></li>
</dropdown>
</variable>
</include>

<!-- #1168 Bug: Using codeAndOutput.md boilerplate causes extra divs to render -->
<include src="codeAndOutput.md" boilerplate >
<variable name="code">
<!-- In a button group -->
<div class="btn-group d-flex" role="group">
  <a href="#dropdown" class="btn btn-danger w-100" role="button">Left</a>
  <!-- With slots you can handle some elements as native bootstrap -->
  <dropdown class="w-100">
    <button slot="button" type="button" class="btn btn-warning dropdown-toggle w-100">
      Action
      <span class="caret"></span>
    </button>
    <ul slot="dropdown-menu" class="dropdown-menu">
      <li><a href="#dropdown" class="dropdown-item">...</a></li>
    </ul>
  </dropdown>
  <a href="#dropdown" class="btn btn-success w-100" role="button">Right</a>
</div>
</variable>
</include>

------------

# #1168 Bug: Src, preload and fragment attribute also shows

<!-- #1168 Bug: src resolves to full absolute path. Fragment attribute also shows -->
<include src="codeAndOutput.md" boilerplate >
<variable name="code">
<panel header="Right click and inspect my HTML before expanding me!" src="extra/loadContent.html#fragment" preload>
  <p>You should be able to find this text before expanding the Panel.</p>
</panel>
</variable>
</include>

